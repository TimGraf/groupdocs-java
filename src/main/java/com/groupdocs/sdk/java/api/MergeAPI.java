/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class MergeAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Add job document datasource
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param jobId  Job id
     *  @param fileId  File GUID
     *  @param datasourceId  Datasource id
     *  
	 * @return AddDocumentDataSourceResponse {@link AddDocumentDataSourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, jobId, fileId, datasourceId") 
	 public static AddDocumentDataSourceResponse AddJobDocumentDataSource(String userId, String jobId, String fileId, String datasourceId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/jobs/{jobId}/files/{fileId}/datasources/{datasourceId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( jobId != null) {
			resourcePath = resourcePath.replace("{jobId}", APIInvoker.toPathValue(jobId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( datasourceId != null) {
			resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(datasourceId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDocumentDataSourceResponse responseObject = (AddDocumentDataSourceResponse) getApiInvoker().deserialize(response, AddDocumentDataSourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Add job document datasource fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param jobId  Job id
     *  @param fileId  File GUID
     *  @param postData  Fields
     *  
	 * @return AddDocumentDataSourceResponse {@link AddDocumentDataSourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, jobId, fileId, postData") 
	 public static AddDocumentDataSourceResponse AddJobDocumentDataSourceFields(String userId, String jobId, String fileId, List<DatasourceField> postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/jobs/{jobId}/files/{fileId}/datasources";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( jobId != null) {
			resourcePath = resourcePath.replace("{jobId}", APIInvoker.toPathValue(jobId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDocumentDataSourceResponse responseObject = (AddDocumentDataSourceResponse) getApiInvoker().deserialize(response, AddDocumentDataSourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Merge datasource
	 *
	 * 
	 * 
     * @param mergeMergeInputFilesInputDatasourcesInput  
     *  
	 * @return MergeTemplateResponse {@link MergeTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="mergeMergeInputFilesInputDatasourcesInput") 
	 public static MergeTemplateResponse MergeDatasource(MergeMergeInputFilesInputDatasourcesInput mergeMergeInputFilesInputDatasourcesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/datasources/{datasourceId}?new_type={targetType}&email_results={emailResults}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		
		
		if( mergeMergeInputFilesInputDatasourcesInput != null && mergeMergeInputFilesInputDatasourcesInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(mergeMergeInputFilesInputDatasourcesInput.getUserId()));
		}
		if( mergeMergeInputFilesInputDatasourcesInput != null && mergeMergeInputFilesInputDatasourcesInput.getFileId() != null) {
		 	resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(mergeMergeInputFilesInputDatasourcesInput.getFileId()));
		}
		if( mergeMergeInputFilesInputDatasourcesInput != null && mergeMergeInputFilesInputDatasourcesInput.getDatasourceId() != null) {
		 	resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(mergeMergeInputFilesInputDatasourcesInput.getDatasourceId()));
		}
		if( mergeMergeInputFilesInputDatasourcesInput != null && mergeMergeInputFilesInputDatasourcesInput.getTargetType() != null) {
		 	resourcePath = resourcePath.replace("{targetType}", APIInvoker.toPathValue(mergeMergeInputFilesInputDatasourcesInput.getTargetType()));
		}
		if( mergeMergeInputFilesInputDatasourcesInput != null && mergeMergeInputFilesInputDatasourcesInput.getEmailResults() != null) {
		 	resourcePath = resourcePath.replace("{emailResults}", APIInvoker.toPathValue(mergeMergeInputFilesInputDatasourcesInput.getEmailResults()));
		}

	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		MergeTemplateResponse responseObject = (MergeTemplateResponse) getApiInvoker().deserialize(response, MergeTemplateResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Merge datasource fields
	 *
	 * 
	 * 
     * @param postData  Fields
     *  @param mergeMergeInputFilesInput  
     *  
	 * @return MergeTemplateResponse {@link MergeTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, mergeMergeInputFilesInput") 
	 public static MergeTemplateResponse MergeDatasourceFields(List<DatasourceField> postData, MergeMergeInputFilesInput mergeMergeInputFilesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/datasources?new_type={targetType}&email_results={emailResults}&assembly_name={assemblyName}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		
		
		if( mergeMergeInputFilesInput != null && mergeMergeInputFilesInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(mergeMergeInputFilesInput.getUserId()));
		}
		if( mergeMergeInputFilesInput != null && mergeMergeInputFilesInput.getFileId() != null) {
		 	resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(mergeMergeInputFilesInput.getFileId()));
		}
		if( mergeMergeInputFilesInput != null && mergeMergeInputFilesInput.getTargetType() != null) {
		 	resourcePath = resourcePath.replace("{targetType}", APIInvoker.toPathValue(mergeMergeInputFilesInput.getTargetType()));
		}
		if( mergeMergeInputFilesInput != null && mergeMergeInputFilesInput.getEmailResults() != null) {
		 	resourcePath = resourcePath.replace("{emailResults}", APIInvoker.toPathValue(mergeMergeInputFilesInput.getEmailResults()));
		}
		if( mergeMergeInputFilesInput != null && mergeMergeInputFilesInput.getAssemblyName() != null) {
		 	resourcePath = resourcePath.replace("{assemblyName}", APIInvoker.toPathValue(mergeMergeInputFilesInput.getAssemblyName()));
		}

	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		MergeTemplateResponse responseObject = (MergeTemplateResponse) getApiInvoker().deserialize(response, MergeTemplateResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param questionnaireId  Questionnaire id
     *  
	 * @return GetQuestionnaireResponse {@link GetQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, questionnaireId") 
	 public static GetQuestionnaireResponse GetQuestionnaire(String userId, String questionnaireId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/{questionnaireId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetQuestionnaireResponse responseObject = (GetQuestionnaireResponse) getApiInvoker().deserialize(response, GetQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get questionnaires
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return GetQuestionnairesResponse {@link GetQuestionnairesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId") 
	 public static GetQuestionnairesResponse GetQuestionnaires(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetQuestionnairesResponse responseObject = (GetQuestionnairesResponse) getApiInvoker().deserialize(response, GetQuestionnairesResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Create questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Questionnaire
     *  
	 * @return CreateQuestionnaireResponse {@link CreateQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData") 
	 public static CreateQuestionnaireResponse CreateQuestionnaire(String userId, QuestionnaireInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CreateQuestionnaireResponse responseObject = (CreateQuestionnaireResponse) getApiInvoker().deserialize(response, CreateQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Update questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param questionnaireId  Questionnaire id
     *  @param postData  Questionnaire
     *  
	 * @return UpdateQuestionnaireResponse {@link UpdateQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, questionnaireId, postData") 
	 public static UpdateQuestionnaireResponse UpdateQuestionnaire(String userId, String questionnaireId, QuestionnaireInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/{questionnaireId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateQuestionnaireResponse responseObject = (UpdateQuestionnaireResponse) getApiInvoker().deserialize(response, UpdateQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Delete questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param questionnaireId  Questionnaire id
     *  
	 * @return DeleteQuestionnaireResponse {@link DeleteQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, questionnaireId") 
	 public static DeleteQuestionnaireResponse DeleteQuestionnaire(String userId, String questionnaireId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/{questionnaireId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteQuestionnaireResponse responseObject = (DeleteQuestionnaireResponse) getApiInvoker().deserialize(response, DeleteQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get document questionnaires
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  
	 * @return GetDocumentQuestionnairesResponse {@link GetDocumentQuestionnairesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId") 
	 public static GetDocumentQuestionnairesResponse GetDocumentQuestionnaires(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/questionnaires";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetDocumentQuestionnairesResponse responseObject = (GetDocumentQuestionnairesResponse) getApiInvoker().deserialize(response, GetDocumentQuestionnairesResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Create document questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param postData  Questionnaire
     *  
	 * @return AddDocumentQuestionnaireResponse {@link AddDocumentQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, postData") 
	 public static AddDocumentQuestionnaireResponse CreateDocumentQuestionnaire(String userId, String fileId, QuestionnaireInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/questionnaires";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDocumentQuestionnaireResponse responseObject = (AddDocumentQuestionnaireResponse) getApiInvoker().deserialize(response, AddDocumentQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Add document questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param questionnaireId  Questionnaire id
     *  
	 * @return AddDocumentQuestionnaireResponse {@link AddDocumentQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, questionnaireId") 
	 public static AddDocumentQuestionnaireResponse AddDocumentQuestionnaire(String userId, String fileId, String questionnaireId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/questionnaires/{questionnaireId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDocumentQuestionnaireResponse responseObject = (AddDocumentQuestionnaireResponse) getApiInvoker().deserialize(response, AddDocumentQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Delete document questionnaire
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param questionnaireId  Questionnaire id
     *  
	 * @return DeleteDocumentQuestionnaireResponse {@link DeleteDocumentQuestionnaireResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, questionnaireId") 
	 public static DeleteDocumentQuestionnaireResponse DeleteDocumentQuestionnaire(String userId, String fileId, String questionnaireId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/files/{fileId}/questionnaires/{questionnaireId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteDocumentQuestionnaireResponse responseObject = (DeleteDocumentQuestionnaireResponse) getApiInvoker().deserialize(response, DeleteDocumentQuestionnaireResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Add datasource
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Datasource
     *  
	 * @return AddDatasourceResponse {@link AddDatasourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData") 
	 public static AddDatasourceResponse AddDataSource(String userId, Datasource postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/datasources";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDatasourceResponse responseObject = (AddDatasourceResponse) getApiInvoker().deserialize(response, AddDatasourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Update datasource
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param datasourceId  Datasource id
     *  @param postData  Datasource
     *  
	 * @return AddDatasourceResponse {@link AddDatasourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, datasourceId, postData") 
	 public static AddDatasourceResponse UpdateDataSource(String userId, String datasourceId, Datasource postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/datasources/{datasourceId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( datasourceId != null) {
			resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(datasourceId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDatasourceResponse responseObject = (AddDatasourceResponse) getApiInvoker().deserialize(response, AddDatasourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Update datasource fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param datasourceId  Datasource id
     *  @param postData  Datasource
     *  
	 * @return AddDatasourceResponse {@link AddDatasourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, datasourceId, postData") 
	 public static AddDatasourceResponse UpdateDataSourceFields(String userId, String datasourceId, Datasource postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/datasources/{datasourceId}/fields";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( datasourceId != null) {
			resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(datasourceId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddDatasourceResponse responseObject = (AddDatasourceResponse) getApiInvoker().deserialize(response, AddDatasourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Delete datasource fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param datasourceId  Datasource id
     *  
	 * @return DeleteDatasourceResponse {@link DeleteDatasourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, datasourceId") 
	 public static DeleteDatasourceResponse DeleteDataSource(String userId, String datasourceId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/datasources/{datasourceId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( datasourceId != null) {
			resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(datasourceId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteDatasourceResponse responseObject = (DeleteDatasourceResponse) getApiInvoker().deserialize(response, DeleteDatasourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get datasource
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param datasourceId  Datasource id
     *  @param fields  Fields
     *  
	 * @return GetDatasourceResponse {@link GetDatasourceResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, datasourceId, fields") 
	 public static GetDatasourceResponse GetDataSource(String userId, String datasourceId, String fields) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/datasources/{datasourceId}?field={fields}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( datasourceId != null) {
			resourcePath = resourcePath.replace("{datasourceId}", APIInvoker.toPathValue(datasourceId));
		}
		if( fields != null) {
			resourcePath = resourcePath.replace("{fields}", APIInvoker.toPathValue(fields));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetDatasourceResponse responseObject = (GetDatasourceResponse) getApiInvoker().deserialize(response, GetDatasourceResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get questionnaire datasources
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param questionnaireId  QuestionnaireId id
     *  @param includeFields  Include fields
     *  
	 * @return GetDatasourcesResponse {@link GetDatasourcesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, questionnaireId, includeFields") 
	 public static GetDatasourcesResponse GetQuestionnaireDataSources(String userId, String questionnaireId, String includeFields) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/{questionnaireId}/datasources?include_fields={includeFields}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}
		if( includeFields != null) {
			resourcePath = resourcePath.replace("{includeFields}", APIInvoker.toPathValue(includeFields));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetDatasourcesResponse responseObject = (GetDatasourcesResponse) getApiInvoker().deserialize(response, GetDatasourcesResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Add questionnaire execution
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param questionnaireId  Questionnaire id
     *  @param postData  Execution
     *  
	 * @return AddQuestionnaireExecutionResponse {@link AddQuestionnaireExecutionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, questionnaireId, postData") 
	 public static AddQuestionnaireExecutionResponse AddQuestionnaireExecution(String userId, String questionnaireId, QuestionnaireExecutionInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/{questionnaireId}/executions";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( questionnaireId != null) {
			resourcePath = resourcePath.replace("{questionnaireId}", APIInvoker.toPathValue(questionnaireId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddQuestionnaireExecutionResponse responseObject = (AddQuestionnaireExecutionResponse) getApiInvoker().deserialize(response, AddQuestionnaireExecutionResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get questionnaire executions
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return GetQuestionnaireExecutionsResponse {@link GetQuestionnaireExecutionsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId") 
	 public static GetQuestionnaireExecutionsResponse GetQuestionnaireExecutions(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/executions";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetQuestionnaireExecutionsResponse responseObject = (GetQuestionnaireExecutionsResponse) getApiInvoker().deserialize(response, GetQuestionnaireExecutionsResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Update questionnaire execution
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param executionId  Execution id
     *  @param postData  Execution
     *  
	 * @return UpdateQuestionnaireExecutionResponse {@link UpdateQuestionnaireExecutionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, executionId, postData") 
	 public static UpdateQuestionnaireExecutionResponse UpdateQuestionnaireExecution(String userId, String executionId, QuestionnaireExecutionInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/executions/{executionId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( executionId != null) {
			resourcePath = resourcePath.replace("{executionId}", APIInvoker.toPathValue(executionId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateQuestionnaireExecutionResponse responseObject = (UpdateQuestionnaireExecutionResponse) getApiInvoker().deserialize(response, UpdateQuestionnaireExecutionResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Update questionnaire execution status
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param executionId  Execution id
     *  @param postData  Status
     *  
	 * @return UpdateQuestionnaireExecutionResponse {@link UpdateQuestionnaireExecutionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, executionId, postData") 
	 public static UpdateQuestionnaireExecutionResponse UpdateQuestionnaireExecutionStatus(String userId, String executionId, String postData) throws APIException {

		//parse inputs
		String  resourcePath = "/merge/{userId}/questionnaires/executions/{executionId}/status";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( executionId != null) {
			resourcePath = resourcePath.replace("{executionId}", APIInvoker.toPathValue(executionId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateQuestionnaireExecutionResponse responseObject = (UpdateQuestionnaireExecutionResponse) getApiInvoker().deserialize(response, UpdateQuestionnaireExecutionResponse.class);
		return responseObject;		
				
	 }



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}