/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class SignatureAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Delegate envelope recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, recipientId")
	 public static SignatureStatusResponse DelegateEnvelopeRecipient(String userId, String envelopeId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/delegate?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Add contact
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Contact data
     *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData")
	 public static SignatureContactResponse AddContact(String userId, SignatureContactSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/contact";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureContactResponse responseObject = (SignatureContactResponse) getApiInvoker().deserialize(response, SignatureContactResponse.class);
		return responseObject;
	}

	/**
	 * Update contact
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param contactId  Contact GUID
     *  @param postData  Contact data
     *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, contactId, postData")
	 public static SignatureContactResponse ModifyContact(String userId, String contactId, SignatureContactSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/contacts/{contactId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( contactId != null) {
			resourcePath = resourcePath.replace("{contactId}", contactId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureContactResponse responseObject = (SignatureContactResponse) getApiInvoker().deserialize(response, SignatureContactResponse.class);
		return responseObject;
	}

	/**
	 * Get contacts
	 *
	 * 
	 * 
     * @param signatureSignatureInput  
     *  
	 * @return SignatureContactsResponse {@link SignatureContactsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="signatureSignatureInput")
	 public static SignatureContactsResponse GetContacts(SignatureSignatureInput signatureSignatureInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/contacts?firstName={firstName}&lastName={lastName}&email={email}&records={count}&page={page}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInput != null && signatureSignatureInput.getPage() != null) {
		 	queryParams.put("page", signatureSignatureInput.getPage());
		}
		if( signatureSignatureInput != null && signatureSignatureInput.getFirstName() != null) {
		 	queryParams.put("firstName", signatureSignatureInput.getFirstName());
		}
		if( signatureSignatureInput != null && signatureSignatureInput.getLastName() != null) {
		 	queryParams.put("lastName", signatureSignatureInput.getLastName());
		}
		if( signatureSignatureInput != null && signatureSignatureInput.getEmail() != null) {
		 	queryParams.put("email", signatureSignatureInput.getEmail());
		}

		if( signatureSignatureInput != null && signatureSignatureInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInput.getUserId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureContactsResponse responseObject = (SignatureContactsResponse) getApiInvoker().deserialize(response, SignatureContactsResponse.class);
		return responseObject;
	}

	/**
	 * Delete contact
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param contactId  Contact GUID
     *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, contactId")
	 public static SignatureContactResponse DeleteContact(String userId, String contactId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/contacts/{contactId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( contactId != null) {
			resourcePath = resourcePath.replace("{contactId}", contactId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureContactResponse responseObject = (SignatureContactResponse) getApiInvoker().deserialize(response, SignatureContactResponse.class);
		return responseObject;
	}

	/**
	 * Import contacts
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return SignatureContactsImportResponse {@link SignatureContactsImportResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static SignatureContactsImportResponse ImportContacts(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/contacts";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureContactsImportResponse responseObject = (SignatureContactsImportResponse) getApiInvoker().deserialize(response, SignatureContactsImportResponse.class);
		return responseObject;
	}

	/**
	 * Get envelope recources
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return SignatureEnvelopeResourcesResponse {@link SignatureEnvelopeResourcesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static SignatureEnvelopeResourcesResponse GetSignatureEnvelopeResources(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/resources";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeResourcesResponse responseObject = (SignatureEnvelopeResourcesResponse) getApiInvoker().deserialize(response, SignatureEnvelopeResourcesResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature envelope field location
	 *
	 * 
	 * 
     * @param postData  Settings of the field location
     *  @param signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput  
     *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput")
	 public static SignatureEnvelopeFieldResponse ModifySignatureEnvelopeFieldLocation(SignatureEnvelopeFieldLocationSettings postData, SignatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getUserId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getEnvelopeId() != null) {
		 	resourcePath = resourcePath.replace("{envelopeId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getEnvelopeId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getDocumentId() != null) {
		 	resourcePath = resourcePath.replace("{documentId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getDocumentId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getRecipientId() != null) {
		 	resourcePath = resourcePath.replace("{recipientId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getRecipientId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getFieldId() != null) {
		 	resourcePath = resourcePath.replace("{fieldId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getFieldId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getLocationId() != null) {
		 	resourcePath = resourcePath.replace("{locationId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getLocationId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeFieldResponse responseObject = (SignatureEnvelopeFieldResponse) getApiInvoker().deserialize(response, SignatureEnvelopeFieldResponse.class);
		return responseObject;
	}

	/**
	 * Get templates
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param page  Page number
     *  
	 * @return SignatureTemplatesResponse {@link SignatureTemplatesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, page")
	 public static SignatureTemplatesResponse GetSignatureTemplates(String userId, String page) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates?records={count}&page={page}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( page != null) {
		 	queryParams.put("page", page);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplatesResponse responseObject = (SignatureTemplatesResponse) getApiInvoker().deserialize(response, SignatureTemplatesResponse.class);
		return responseObject;
	}

	/**
	 * Get template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId")
	 public static SignatureTemplateResponse GetSignatureTemplate(String userId, String templateId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Create template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param name  Template name
     *  @param templateId  Template GUID of the template that will be used to create the new template
     *  @param postData  Settings of the template
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, name, templateId, postData")
	 public static SignatureTemplateResponse CreateSignatureTemplate(String userId, String name, String templateId, SignatureTemplateSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/template?name={name}&templateId={templateId}&envelopeId={envelopeId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( name != null) {
		 	queryParams.put("name", name);
		}
		if( templateId != null) {
		 	queryParams.put("templateId", templateId);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Modify template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param postData  Settings of the template
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, postData")
	 public static SignatureTemplateResponse ModifySignatureTemplate(String userId, String templateId, SignatureTemplateSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Rename template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param name  New template name
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, name")
	 public static SignatureTemplateResponse RenameSignatureTemplate(String userId, String templateId, String name) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/tempalates/{templateId}?name={name}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( name != null) {
		 	queryParams.put("name", name);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Delete template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId")
	 public static SignatureStatusResponse DeleteSignatureTemplate(String userId, String templateId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Add recipient to the template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param nickname  Nickname of the recipient
     *  @param order  Display order of the recipient
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, nickname, order")
	 public static SignatureTemplateResponse AddSignatureTemplateRecipient(String userId, String templateId, String nickname, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/recipient?nickname={nickname}&role={roleId}&order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( nickname != null) {
		 	queryParams.put("nickname", nickname);
		}
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Get template recipients
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  
	 * @return SignatureTemplateRecipientsResponse {@link SignatureTemplateRecipientsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId")
	 public static SignatureTemplateRecipientsResponse GetSignatureTemplateRecipients(String userId, String templateId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/recipients";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateRecipientsResponse responseObject = (SignatureTemplateRecipientsResponse) getApiInvoker().deserialize(response, SignatureTemplateRecipientsResponse.class);
		return responseObject;
	}

	/**
	 * Remove recipient from template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, recipientId")
	 public static SignatureStatusResponse DeleteSignatureTemplateRecipient(String userId, String templateId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/recipients/{recipientId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Update template recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param nickname  Nickname of the recipient
     *  @param order  Display order of the recipient
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, nickname, order")
	 public static SignatureTemplateResponse ModifySignatureTemplateRecipient(String userId, String templateId, String nickname, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/recipient/{recipientId}?nickname={nickname}&role={roleId}&order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( nickname != null) {
		 	queryParams.put("nickname", nickname);
		}
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Add document to template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param documentId  Document GUID
     *  @param order  Display order of the document
     *  
	 * @return SignatureTemplateDocumentResponse {@link SignatureTemplateDocumentResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, documentId, order")
	 public static SignatureTemplateDocumentResponse AddSignatureTemplateDocument(String userId, String templateId, String documentId, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/document/{documentId}?order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateDocumentResponse responseObject = (SignatureTemplateDocumentResponse) getApiInvoker().deserialize(response, SignatureTemplateDocumentResponse.class);
		return responseObject;
	}

	/**
	 * Get documents in template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  
	 * @return SignatureTemplateDocumentsResponse {@link SignatureTemplateDocumentsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId")
	 public static SignatureTemplateDocumentsResponse GetSignatureTemplateDocuments(String userId, String templateId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/documents";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateDocumentsResponse responseObject = (SignatureTemplateDocumentsResponse) getApiInvoker().deserialize(response, SignatureTemplateDocumentsResponse.class);
		return responseObject;
	}

	/**
	 * Remove document from template
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param documentId  Document GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, documentId")
	 public static SignatureStatusResponse DeleteSignatureTemplateDocument(String userId, String templateId, String documentId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Add signature template field
	 *
	 * 
	 * 
     * @param postData  Settings of the field
     *  @param signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput  
     *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput")
	 public static SignatureTemplateFieldResponse AddSignatureTemplateField(SignatureTemplateFieldSettings postData, SignatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getUserId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getTemplateId() != null) {
		 	resourcePath = resourcePath.replace("{templateId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getTemplateId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getDocumentId() != null) {
		 	resourcePath = resourcePath.replace("{documentId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getDocumentId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getRecipientId() != null) {
		 	resourcePath = resourcePath.replace("{recipientId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.getRecipientId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateFieldResponse responseObject = (SignatureTemplateFieldResponse) getApiInvoker().deserialize(response, SignatureTemplateFieldResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature template field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param documentId  Document GUID
     *  @param fieldId  Field GUID
     *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, documentId, fieldId")
	 public static SignatureTemplateFieldResponse ModifySignatureTemplateField(String userId, String templateId, String documentId, String fieldId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/field/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateFieldResponse responseObject = (SignatureTemplateFieldResponse) getApiInvoker().deserialize(response, SignatureTemplateFieldResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature template field location
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param fieldId  Field GUID
     *  @param locationId  Field location GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, fieldId, locationId")
	 public static SignatureStatusResponse DeleteSignatureTemplateFieldLocation(String userId, String templateId, String fieldId, String locationId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/fields/{fieldId}/locations/{locationId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}
		if( locationId != null) {
			resourcePath = resourcePath.replace("{locationId}", locationId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature template field location
	 *
	 * 
	 * 
     * @param postData  Settings of the field location
     *  @param signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput  
     *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput")
	 public static SignatureTemplateFieldResponse ModifySignatureTemplateFieldLocation(SignatureTemplateFieldLocationSettings postData, SignatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getUserId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getTemplateId() != null) {
		 	resourcePath = resourcePath.replace("{templateId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getTemplateId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getDocumentId() != null) {
		 	resourcePath = resourcePath.replace("{documentId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getDocumentId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getRecipientId() != null) {
		 	resourcePath = resourcePath.replace("{recipientId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getRecipientId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getFieldId() != null) {
		 	resourcePath = resourcePath.replace("{fieldId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getFieldId());
		}
		if( signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != null && signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getLocationId() != null) {
		 	resourcePath = resourcePath.replace("{locationId}", signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.getLocationId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateFieldResponse responseObject = (SignatureTemplateFieldResponse) getApiInvoker().deserialize(response, SignatureTemplateFieldResponse.class);
		return responseObject;
	}

	/**
	 * Get template fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param documentId  Document GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureTemplateFieldsResponse {@link SignatureTemplateFieldsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, documentId, recipientId")
	 public static SignatureTemplateFieldsResponse GetSignatureTemplateFields(String userId, String templateId, String documentId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/fields?document={documentId}&recipient={recipientId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateFieldsResponse responseObject = (SignatureTemplateFieldsResponse) getApiInvoker().deserialize(response, SignatureTemplateFieldsResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature template field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param templateId  Template GUID
     *  @param fieldId  Field GUID
     *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, templateId, fieldId")
	 public static SignatureTemplateResponse DeleteSignatureTemplateField(String userId, String templateId, String fieldId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/templates/{templateId}/fields/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( templateId != null) {
			resourcePath = resourcePath.replace("{templateId}", templateId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureTemplateResponse responseObject = (SignatureTemplateResponse) getApiInvoker().deserialize(response, SignatureTemplateResponse.class);
		return responseObject;
	}

	/**
	 * Get user signatures
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return SignatureSignaturesResponse {@link SignatureSignaturesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static SignatureSignaturesResponse GetSignatures(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/signatures";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureSignaturesResponse responseObject = (SignatureSignaturesResponse) getApiInvoker().deserialize(response, SignatureSignaturesResponse.class);
		return responseObject;
	}

	/**
	 * Delete user signature
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param signatureId  Signature GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, signatureId")
	 public static SignatureStatusResponse DeleteSignature(String userId, String signatureId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/signatures/{signatureId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( signatureId != null) {
			resourcePath = resourcePath.replace("{signatureId}", signatureId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Create user signature
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param name  Signature name
     *  @param postData  Settings of the field
     *  
	 * @return SignatureSignatureResponse {@link SignatureSignatureResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, name, postData")
	 public static SignatureSignatureResponse CreateSignature(String userId, String name, SignatureSignatureSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/signature?name={name}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( name != null) {
		 	queryParams.put("name", name);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureSignatureResponse responseObject = (SignatureSignatureResponse) getApiInvoker().deserialize(response, SignatureSignatureResponse.class);
		return responseObject;
	}

	/**
	 * Add signature image
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param signatureId  Signature GUID
     *  @param type  0: Signature, 1: Initials
     *  @param dataFrom  Url to document containing the image
     *  
	 * @return SignatureSignatureResponse {@link SignatureSignatureResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, signatureId, type, dataFrom")
	 public static SignatureSignatureResponse AddSignatureImage(String userId, String signatureId, String type, String dataFrom) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/signature/{signatureId}/image?type={type}&datafrom={dataFrom}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( type != null) {
		 	queryParams.put("type", type);
		}
		if( dataFrom != null) {
		 	queryParams.put("dataFrom", dataFrom);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( signatureId != null) {
			resourcePath = resourcePath.replace("{signatureId}", signatureId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureSignatureResponse responseObject = (SignatureSignatureResponse) getApiInvoker().deserialize(response, SignatureSignatureResponse.class);
		return responseObject;
	}

	/**
	 * Fill envelope field
	 *
	 * 
	 * 
     * @param postData  Data to be placed in field
     *  @param signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput  
     *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput")
	 public static SignatureEnvelopeFieldResponse FillEnvelopeField(String postData, SignatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}?signatureId={signatureId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getUserId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getEnvelopeId() != null) {
		 	resourcePath = resourcePath.replace("{envelopeId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getEnvelopeId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getDocumentId() != null) {
		 	resourcePath = resourcePath.replace("{documentId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getDocumentId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getRecipientId() != null) {
		 	resourcePath = resourcePath.replace("{recipientId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getRecipientId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getFieldId() != null) {
		 	resourcePath = resourcePath.replace("{fieldId}", signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.getFieldId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeFieldResponse responseObject = (SignatureEnvelopeFieldResponse) getApiInvoker().deserialize(response, SignatureEnvelopeFieldResponse.class);
		return responseObject;
	}

	/**
	 * Sign envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, recipientId")
	 public static SignatureStatusResponse SignEnvelope(String userId, String envelopeId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/sign";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Decline envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, recipientId")
	 public static SignatureStatusResponse DeclineEnvelope(String userId, String envelopeId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/decline";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Get signature envelopes
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param statusId  Filter envelopes by statusId
     *  @param page  Show records for page number
     *  @param recipientEmail  Filter envelopes by recipient email
     *  @param date  Filter envelopes by date
     *  @param name  Filter envelopes by name
     *  
	 * @return SignatureEnvelopesResponse {@link SignatureEnvelopesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, statusId, page, recipientEmail, date, name")
	 public static SignatureEnvelopesResponse GetSignatureEnvelopes(String userId, String statusId, String page, String recipientEmail, String date, String name) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes?statusId={statusId}&records={count}&page={page}&document={originalDocumentMD5}&recipient={recipientEmail}&date={date}&name={name}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( statusId != null) {
		 	queryParams.put("statusId", statusId);
		}
		if( page != null) {
		 	queryParams.put("page", page);
		}
		if( recipientEmail != null) {
		 	queryParams.put("recipientEmail", recipientEmail);
		}
		if( date != null) {
		 	queryParams.put("date", date);
		}
		if( name != null) {
		 	queryParams.put("name", name);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopesResponse responseObject = (SignatureEnvelopesResponse) getApiInvoker().deserialize(response, SignatureEnvelopesResponse.class);
		return responseObject;
	}

	/**
	 * Get signature envelopes where the user is recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param statusId  Filter envelopes by statusId
     *  @param page  Show records for page number
     *  
	 * @return SignatureEnvelopesResponse {@link SignatureEnvelopesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, statusId, page")
	 public static SignatureEnvelopesResponse GetRecipientSignatureEnvelopes(String userId, String statusId, String page) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/recipient?statusId={statusId}&records={count}&page={page}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( statusId != null) {
		 	queryParams.put("statusId", statusId);
		}
		if( page != null) {
		 	queryParams.put("page", page);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopesResponse responseObject = (SignatureEnvelopesResponse) getApiInvoker().deserialize(response, SignatureEnvelopesResponse.class);
		return responseObject;
	}

	/**
	 * Get signature envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureEnvelopeResponse GetSignatureEnvelope(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeResponse responseObject = (SignatureEnvelopeResponse) getApiInvoker().deserialize(response, SignatureEnvelopeResponse.class);
		return responseObject;
	}

	/**
	 * Create signature envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param name  Envelope name
     *  @param postData  Settings of the new envelope
     *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, name, postData")
	 public static SignatureEnvelopeResponse CreateSignatureEnvelope(String userId, String name, SignatureEnvelopeSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelope?name={name}&templateId={templateId}&envelopeId={envelopeId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( name != null) {
		 	queryParams.put("name", name);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeResponse responseObject = (SignatureEnvelopeResponse) getApiInvoker().deserialize(response, SignatureEnvelopeResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param postData  Settings of the envelope
     *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, postData")
	 public static SignatureEnvelopeResponse ModifySignatureEnvelope(String userId, String envelopeId, SignatureEnvelopeSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeResponse responseObject = (SignatureEnvelopeResponse) getApiInvoker().deserialize(response, SignatureEnvelopeResponse.class);
		return responseObject;
	}

	/**
	 * Rename signature envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param name  New envelope name
     *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, name")
	 public static SignatureEnvelopeResponse RenameSignatureEnvelope(String userId, String envelopeId, String name) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}?name={name}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( name != null) {
		 	queryParams.put("name", name);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeResponse responseObject = (SignatureEnvelopeResponse) getApiInvoker().deserialize(response, SignatureEnvelopeResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureStatusResponse DeleteSignatureEnvelope(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Get signature roles
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return SignatureRolesResponse {@link SignatureRolesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static SignatureRolesResponse GetRolesList(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/roles?id={roleId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureRolesResponse responseObject = (SignatureRolesResponse) getApiInvoker().deserialize(response, SignatureRolesResponse.class);
		return responseObject;
	}

	/**
	 * Get signature fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return SignatureFieldsResponse {@link SignatureFieldsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static SignatureFieldsResponse GetFieldsList(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/fields?id={fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureFieldsResponse responseObject = (SignatureFieldsResponse) getApiInvoker().deserialize(response, SignatureFieldsResponse.class);
		return responseObject;
	}

	/**
	 * Create signature field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Settings of the new field
     *  
	 * @return SignatureFieldResponse {@link SignatureFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData")
	 public static SignatureFieldResponse CreateSignatureField(String userId, SignatureFieldSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/field";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureFieldResponse responseObject = (SignatureFieldResponse) getApiInvoker().deserialize(response, SignatureFieldResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fieldId  Field GUID
     *  @param postData  Settings of the field
     *  
	 * @return SignatureFieldResponse {@link SignatureFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fieldId, postData")
	 public static SignatureFieldResponse ModifySignatureField(String userId, String fieldId, SignatureFieldSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/fields/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureFieldResponse responseObject = (SignatureFieldResponse) getApiInvoker().deserialize(response, SignatureFieldResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fieldId  Field GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fieldId")
	 public static SignatureStatusResponse DeleteSignatureField(String userId, String fieldId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/fields/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Add signature envelope recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param order  Recipient order
     *  
	 * @return SignatureEnvelopeRecipientResponse {@link SignatureEnvelopeRecipientResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, order")
	 public static SignatureEnvelopeRecipientResponse AddSignatureEnvelopeRecipient(String userId, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeRecipientResponse responseObject = (SignatureEnvelopeRecipientResponse) getApiInvoker().deserialize(response, SignatureEnvelopeRecipientResponse.class);
		return responseObject;
	}

	/**
	 * Get signature envelope recipients
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureEnvelopeRecipientsResponse {@link SignatureEnvelopeRecipientsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureEnvelopeRecipientsResponse GetSignatureEnvelopeRecipients(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipients";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeRecipientsResponse responseObject = (SignatureEnvelopeRecipientsResponse) getApiInvoker().deserialize(response, SignatureEnvelopeRecipientsResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature envelope recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, recipientId")
	 public static SignatureStatusResponse DeleteSignatureEnvelopeRecipient(String userId, String envelopeId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipients/{recipientId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature envelope recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param order  Recipient order
     *  
	 * @return SignatureEnvelopeRecipientResponse {@link SignatureEnvelopeRecipientResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, order")
	 public static SignatureEnvelopeRecipientResponse ModifySignatureEnvelopeRecipient(String userId, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeRecipientResponse responseObject = (SignatureEnvelopeRecipientResponse) getApiInvoker().deserialize(response, SignatureEnvelopeRecipientResponse.class);
		return responseObject;
	}

	/**
	 * Add document in envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param documentId  Document GUID
     *  @param order  Document order
     *  
	 * @return SignatureEnvelopeDocumentResponse {@link SignatureEnvelopeDocumentResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, documentId, order")
	 public static SignatureEnvelopeDocumentResponse AddSignatureEnvelopeDocument(String userId, String envelopeId, String documentId, String order) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}?order={order}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( order != null) {
		 	queryParams.put("order", order);
		}

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeDocumentResponse responseObject = (SignatureEnvelopeDocumentResponse) getApiInvoker().deserialize(response, SignatureEnvelopeDocumentResponse.class);
		return responseObject;
	}

	/**
	 * Get documents in envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureEnvelopeDocumentsResponse {@link SignatureEnvelopeDocumentsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureEnvelopeDocumentsResponse GetSignatureEnvelopeDocuments(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeDocumentsResponse responseObject = (SignatureEnvelopeDocumentsResponse) getApiInvoker().deserialize(response, SignatureEnvelopeDocumentsResponse.class);
		return responseObject;
	}

	/**
	 * Get signed envelope document
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param documentId  Document GUID
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, documentId")
	 public static String GetSignedEnvelopeDocument(String userId, String envelopeId, String documentId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get signed envelope documents
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static String GetSignedEnvelopeDocuments(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/get";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Delete document from envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param documentId  Document GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, documentId")
	 public static SignatureStatusResponse DeleteSignatureEnvelopeDocument(String userId, String envelopeId, String documentId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Add signature field for document in envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param documentId  Document GUID
     *  @param recipientId  Recipient GUID
     *  @param fieldId  Field GUID
     *  @param postData  Settings of the field
     *  
	 * @return SignatureEnvelopeFieldsResponse {@link SignatureEnvelopeFieldsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, documentId, recipientId, fieldId, postData")
	 public static SignatureEnvelopeFieldsResponse AddSignatureEnvelopeField(String userId, String envelopeId, String documentId, String recipientId, String fieldId, SignatureEnvelopeFieldSettings postData) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeFieldsResponse responseObject = (SignatureEnvelopeFieldsResponse) getApiInvoker().deserialize(response, SignatureEnvelopeFieldsResponse.class);
		return responseObject;
	}

	/**
	 * Get signature field for document in envelope per recipient
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param documentId  Document GUID
     *  @param recipientId  Recipient GUID
     *  
	 * @return SignatureEnvelopeFieldsResponse {@link SignatureEnvelopeFieldsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, documentId, recipientId")
	 public static SignatureEnvelopeFieldsResponse GetSignatureEnvelopeFields(String userId, String envelopeId, String documentId, String recipientId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields?document={documentId}&recipient={recipientId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( documentId != null) {
			resourcePath = resourcePath.replace("{documentId}", documentId);
		}
		if( recipientId != null) {
			resourcePath = resourcePath.replace("{recipientId}", recipientId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeFieldsResponse responseObject = (SignatureEnvelopeFieldsResponse) getApiInvoker().deserialize(response, SignatureEnvelopeFieldsResponse.class);
		return responseObject;
	}

	/**
	 * Delete signature envelope field
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param fieldId  Field GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, fieldId")
	 public static SignatureStatusResponse DeleteSignatureEnvelopeField(String userId, String envelopeId, String fieldId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Modify signature envelope field
	 *
	 * 
	 * 
     * @param postData  Settings of the field
     *  @param signatureSignatureInputEnvelopesInputDocumentsInputFieldInput  
     *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, signatureSignatureInputEnvelopesInputDocumentsInputFieldInput")
	 public static SignatureEnvelopeFieldResponse ModifySignatureEnvelopeField(SignatureEnvelopeFieldSettings postData, SignatureSignatureInputEnvelopesInputDocumentsInputFieldInput signatureSignatureInputEnvelopesInputDocumentsInputFieldInput) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/field/{fieldId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getUserId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getEnvelopeId() != null) {
		 	resourcePath = resourcePath.replace("{envelopeId}", signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getEnvelopeId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getDocumentId() != null) {
		 	resourcePath = resourcePath.replace("{documentId}", signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getDocumentId());
		}
		if( signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != null && signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getFieldId() != null) {
		 	resourcePath = resourcePath.replace("{fieldId}", signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.getFieldId());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureEnvelopeFieldResponse responseObject = (SignatureEnvelopeFieldResponse) getApiInvoker().deserialize(response, SignatureEnvelopeFieldResponse.class);
		return responseObject;
	}

	/**
	 * Archive envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureStatusResponse ArchiveSignatureEnvelope(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/archive";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Send envelope
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId")
	 public static SignatureStatusResponse SignatureEnvelopeSend(String userId, String envelopeId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/send";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}

	/**
	 * Remove signature envelope field location
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param envelopeId  Envelope GUID
     *  @param fieldId  Field GUID
     *  @param locationId  Field location GUID
     *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, envelopeId, fieldId, locationId")
	 public static SignatureStatusResponse DeleteSignatureEnvelopeFieldLocation(String userId, String envelopeId, String fieldId, String locationId) throws APIException {

		//parse inputs
		String  resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}/locations/{locationId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( envelopeId != null) {
			resourcePath = resourcePath.replace("{envelopeId}", envelopeId);
		}
		if( fieldId != null) {
			resourcePath = resourcePath.replace("{fieldId}", fieldId);
		}
		if( locationId != null) {
			resourcePath = resourcePath.replace("{locationId}", locationId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SignatureStatusResponse responseObject = (SignatureStatusResponse) getApiInvoker().deserialize(response, SignatureStatusResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}