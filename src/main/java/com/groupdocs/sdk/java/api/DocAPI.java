/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class DocAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * View Document
	 *
	 * 
	 * 
     * @param docDocInputFilesInput  
     *  
	 * @return ViewDocumentResponse {@link ViewDocumentResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="docDocInputFilesInput") 
	 public static ViewDocumentResponse ViewDocument(DocDocInputFilesInput docDocInputFilesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		
		
		if( docDocInputFilesInput != null && docDocInputFilesInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(docDocInputFilesInput.getUserId()));
		}
		if( docDocInputFilesInput != null && docDocInputFilesInput.getFileId() != null) {
		 	resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(docDocInputFilesInput.getFileId()));
		}
		if( docDocInputFilesInput != null && docDocInputFilesInput.getPageNumber() != null) {
		 	resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(docDocInputFilesInput.getPageNumber()));
		}
		if( docDocInputFilesInput != null && docDocInputFilesInput.getPageCount() != null) {
		 	resourcePath = resourcePath.replace("{pageCount}", APIInvoker.toPathValue(docDocInputFilesInput.getPageCount()));
		}
		if( docDocInputFilesInput != null && docDocInputFilesInput.getQuality() != null) {
		 	resourcePath = resourcePath.replace("{quality}", APIInvoker.toPathValue(docDocInputFilesInput.getQuality()));
		}
		if( docDocInputFilesInput != null && docDocInputFilesInput.getUsePdf() != null) {
		 	resourcePath = resourcePath.replace("{usePdf}", APIInvoker.toPathValue(docDocInputFilesInput.getUsePdf()));
		}

	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ViewDocumentResponse responseObject = (ViewDocumentResponse) getApiInvoker().deserialize(response, ViewDocumentResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get Document Views
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param startIndex  Use Pdf
     *  @param pageSize  Page size
     *  
	 * @return DocumentViewsResponse {@link DocumentViewsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, startIndex, pageSize") 
	 public static DocumentViewsResponse GetDocumentViews(String userId, String startIndex, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/views?page_index={startIndex}&page_size={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( startIndex != null) {
			resourcePath = resourcePath.replace("{startIndex}", APIInvoker.toPathValue(startIndex));
		}
		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DocumentViewsResponse responseObject = (DocumentViewsResponse) getApiInvoker().deserialize(response, DocumentViewsResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Share document
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param sharers  Sharers
     *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, sharers") 
	 public static SharedUsersResponse ShareDocument(String userId, String fileId, String sharers) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/sharers";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( sharers != null) {
			resourcePath = resourcePath.replace("{sharers}", APIInvoker.toPathValue(sharers));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedUsersResponse responseObject = (SharedUsersResponse) getApiInvoker().deserialize(response, SharedUsersResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Unshare document
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId") 
	 public static SharedUsersResponse UnshareDocument(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/sharers";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedUsersResponse responseObject = (SharedUsersResponse) getApiInvoker().deserialize(response, SharedUsersResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get folder sharers
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param folderId  Folder Id
     *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, folderId") 
	 public static SharedUsersResponse GetFolderSharers(String userId, String folderId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( folderId != null) {
			resourcePath = resourcePath.replace("{folderId}", APIInvoker.toPathValue(folderId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedUsersResponse responseObject = (SharedUsersResponse) getApiInvoker().deserialize(response, SharedUsersResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Share folder
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param folderId  Folder Id
     *  @param sharers  Sharers
     *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, folderId, sharers") 
	 public static SharedUsersResponse ShareFolder(String userId, String folderId, String sharers) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( folderId != null) {
			resourcePath = resourcePath.replace("{folderId}", APIInvoker.toPathValue(folderId));
		}
		if( sharers != null) {
			resourcePath = resourcePath.replace("{sharers}", APIInvoker.toPathValue(sharers));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedUsersResponse responseObject = (SharedUsersResponse) getApiInvoker().deserialize(response, SharedUsersResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Unshare folder
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param folderId  Folder Id
     *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, folderId") 
	 public static SharedUsersResponse UnshareFolder(String userId, String folderId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( folderId != null) {
			resourcePath = resourcePath.replace("{folderId}", APIInvoker.toPathValue(folderId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedUsersResponse responseObject = (SharedUsersResponse) getApiInvoker().deserialize(response, SharedUsersResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Set document access mode
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param mode  Mode
     * 	 *      Allowed values are - 0,1,2,3,255  
	 * @return DocumentAccessInfoResponse {@link DocumentAccessInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, mode") 
	 public static DocumentAccessInfoResponse SetDocumentAccessMode(String userId, String fileId, String mode) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/accessinfo?mode={mode}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( mode != null) {
			resourcePath = resourcePath.replace("{mode}", APIInvoker.toPathValue(mode));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DocumentAccessInfoResponse responseObject = (DocumentAccessInfoResponse) getApiInvoker().deserialize(response, DocumentAccessInfoResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get document access info
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  
	 * @return DocumentAccessInfoResponse {@link DocumentAccessInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId") 
	 public static DocumentAccessInfoResponse GetDocumentAccessInfo(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/accessinfo";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DocumentAccessInfoResponse responseObject = (DocumentAccessInfoResponse) getApiInvoker().deserialize(response, DocumentAccessInfoResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get document metadata
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  
	 * @return GetDocumentInfoResponse {@link GetDocumentInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId") 
	 public static GetDocumentInfoResponse GetDocumentMetadata(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/metadata";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetDocumentInfoResponse responseObject = (GetDocumentInfoResponse) getApiInvoker().deserialize(response, GetDocumentInfoResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Set document user status
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param status  Status
     *  
	 * @return DocumentUserStatusResponse {@link DocumentUserStatusResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, status") 
	 public static DocumentUserStatusResponse SetDocumentUserStatus(String userId, String fileId, String status) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/sharer";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( status != null) {
			resourcePath = resourcePath.replace("{status}", APIInvoker.toPathValue(status));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DocumentUserStatusResponse responseObject = (DocumentUserStatusResponse) getApiInvoker().deserialize(response, DocumentUserStatusResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get shared documents
	 *
	 * 
	 * 
     * @param docDocInputSharesInput  
     *  
	 * @return SharedDocumentsResponse {@link SharedDocumentsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="docDocInputSharesInput") 
	 public static SharedDocumentsResponse GetSharedDocuments(DocDocInputSharesInput docDocInputSharesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/shares/{sharesTypes}?page_index={pageIndex}&page_size={pageSize}&order_by={orderBy}&order_asc={orderAsc}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		
		
		if( docDocInputSharesInput != null && docDocInputSharesInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(docDocInputSharesInput.getUserId()));
		}
		if( docDocInputSharesInput != null && docDocInputSharesInput.getSharesTypes() != null) {
		 	resourcePath = resourcePath.replace("{sharesTypes}", APIInvoker.toPathValue(docDocInputSharesInput.getSharesTypes()));
		}
		if( docDocInputSharesInput != null && docDocInputSharesInput.getPageIndex() != null) {
		 	resourcePath = resourcePath.replace("{pageIndex}", APIInvoker.toPathValue(docDocInputSharesInput.getPageIndex()));
		}
		if( docDocInputSharesInput != null && docDocInputSharesInput.getPageSize() != null) {
		 	resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(docDocInputSharesInput.getPageSize()));
		}
		if( docDocInputSharesInput != null && docDocInputSharesInput.getOrderBy() != null) {
		 	resourcePath = resourcePath.replace("{orderBy}", APIInvoker.toPathValue(docDocInputSharesInput.getOrderBy()));
		}
		if( docDocInputSharesInput != null && docDocInputSharesInput.getOrderAsc() != null) {
		 	resourcePath = resourcePath.replace("{orderAsc}", APIInvoker.toPathValue(docDocInputSharesInput.getOrderAsc()));
		}

	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SharedDocumentsResponse responseObject = (SharedDocumentsResponse) getApiInvoker().deserialize(response, SharedDocumentsResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get template fields
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  @param includeGeometry  Include geometry
     *  
	 * @return TemplateFieldsResponse {@link TemplateFieldsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, includeGeometry") 
	 public static TemplateFieldsResponse GetTemplateFields(String userId, String fileId, String includeGeometry) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/fields?include_geometry={includeGeometry}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}
		if( includeGeometry != null) {
			resourcePath = resourcePath.replace("{includeGeometry}", APIInvoker.toPathValue(includeGeometry));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		TemplateFieldsResponse responseObject = (TemplateFieldsResponse) getApiInvoker().deserialize(response, TemplateFieldsResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get document formats
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File GUID
     *  
	 * @return GetDocumentForeignTypesResponse {@link GetDocumentForeignTypesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId") 
	 public static GetDocumentForeignTypesResponse GetDocumentFormats(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/doc/{userId}/files/{fileId}/formats";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", APIInvoker.toPathValue(fileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetDocumentForeignTypesResponse responseObject = (GetDocumentForeignTypesResponse) getApiInvoker().deserialize(response, GetDocumentForeignTypesResponse.class);
		return responseObject;		
				
	 }



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}