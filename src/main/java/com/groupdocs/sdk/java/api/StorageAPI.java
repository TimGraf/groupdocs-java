/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class StorageAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Get storage info
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return StorageInfoResponse {@link StorageInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static StorageInfoResponse GetStorageInfo(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		StorageInfoResponse responseObject = (StorageInfoResponse) getApiInvoker().deserialize(response, StorageInfoResponse.class);
		return responseObject;
	}

	/**
	 * List entities
	 *
	 * 
	 * 
     * @param storageStorageInputFoldersInput  
     *  
	 * @return ListEntitiesResponse {@link ListEntitiesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="storageStorageInputFoldersInput")
	 public static ListEntitiesResponse ListEntities(StorageStorageInputFoldersInput storageStorageInputFoldersInput) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/folders/{*path}?page={pageIndex}&count={pageSize}&order_by={orderBy}&order_asc={orderAsc}&filter={filter}&file_types={fileTypes}&extended={extended}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getUserId() != null) {
		 	resourcePath = resourcePath.replace("{userId}", storageStorageInputFoldersInput.getUserId());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getPath() != null) {
		 	resourcePath = resourcePath.replace("{path}", storageStorageInputFoldersInput.getPath());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getPageIndex() != null) {
		 	resourcePath = resourcePath.replace("{pageIndex}", storageStorageInputFoldersInput.getPageIndex());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getPageSize() != null) {
		 	resourcePath = resourcePath.replace("{pageSize}", storageStorageInputFoldersInput.getPageSize());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getOrderBy() != null) {
		 	resourcePath = resourcePath.replace("{orderBy}", storageStorageInputFoldersInput.getOrderBy());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getOrderAsc() != null) {
		 	resourcePath = resourcePath.replace("{orderAsc}", storageStorageInputFoldersInput.getOrderAsc());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getFilter() != null) {
		 	resourcePath = resourcePath.replace("{filter}", storageStorageInputFoldersInput.getFilter());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getFileTypes() != null) {
		 	resourcePath = resourcePath.replace("{fileTypes}", storageStorageInputFoldersInput.getFileTypes());
		}
		if( storageStorageInputFoldersInput != null && storageStorageInputFoldersInput.getExtended() != null) {
		 	resourcePath = resourcePath.replace("{extended}", storageStorageInputFoldersInput.getExtended());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ListEntitiesResponse responseObject = (ListEntitiesResponse) getApiInvoker().deserialize(response, ListEntitiesResponse.class);
		return responseObject;
	}

	/**
	 * Get file
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId")
	 public static String GetFile(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/files/{fileId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get shared file
	 *
	 * 
	 * 
     * @param userEmail  User Email
     *  @param filePath  File path
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userEmail, filePath")
	 public static String GetSharedFile(String userEmail, String filePath) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/shared/{userEmail}/{*filePath}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userEmail != null) {
			resourcePath = resourcePath.replace("{userEmail}", userEmail);
		}
		if( filePath != null) {
			resourcePath = resourcePath.replace("{filePath}", filePath);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Upload
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  @param description  Description
     *  @param postData  Stream
     *  
	 * @return UploadResponse {@link UploadResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path, description, postData")
	 public static UploadResponse Upload(String userId, String path, String description, java.io.File postData) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/folders/{*path}?description={description}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}
		if( description != null) {
			resourcePath = resourcePath.replace("{description}", description);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UploadResponse responseObject = (UploadResponse) getApiInvoker().deserialize(response, UploadResponse.class);
		return responseObject;
	}

	/**
	 * Upload Web
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param url  Url
     *  
	 * @return UploadResponse {@link UploadResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, url")
	 public static UploadResponse UploadWeb(String userId, String url) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/urls?url={url}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( url != null) {
			resourcePath = resourcePath.replace("{url}", url);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UploadResponse responseObject = (UploadResponse) getApiInvoker().deserialize(response, UploadResponse.class);
		return responseObject;
	}

	/**
	 * Delete
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  
	 * @return DeleteResponse {@link DeleteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId")
	 public static DeleteResponse Delete(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/files/{fileId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteResponse responseObject = (DeleteResponse) getApiInvoker().deserialize(response, DeleteResponse.class);
		return responseObject;
	}

	/**
	 * Delete from folder
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  
	 * @return DeleteResponse {@link DeleteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path")
	 public static DeleteResponse DeleteFromFolder(String userId, String path) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/folders/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteResponse responseObject = (DeleteResponse) getApiInvoker().deserialize(response, DeleteResponse.class);
		return responseObject;
	}

	/**
	 * Move file
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  @param mode  Mode
     *  
	 * @return FileMoveResponse {@link FileMoveResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path, mode")
	 public static FileMoveResponse MoveFile(String userId, String path, String mode) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/files/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}
		if( mode != null) {
			resourcePath = resourcePath.replace("{mode}", mode);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		FileMoveResponse responseObject = (FileMoveResponse) getApiInvoker().deserialize(response, FileMoveResponse.class);
		return responseObject;
	}

	/**
	 * Move folder
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  @param mode  Mode
     *  
	 * @return FolderMoveResponse {@link FolderMoveResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path, mode")
	 public static FolderMoveResponse MoveFolder(String userId, String path, String mode) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/folders/{*path}?override_mode={mode}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}
		if( mode != null) {
			resourcePath = resourcePath.replace("{mode}", mode);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		FolderMoveResponse responseObject = (FolderMoveResponse) getApiInvoker().deserialize(response, FolderMoveResponse.class);
		return responseObject;
	}

	/**
	 * Create
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  
	 * @return CreateFolderResponse {@link CreateFolderResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path")
	 public static CreateFolderResponse Create(String userId, String path) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/paths/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CreateFolderResponse responseObject = (CreateFolderResponse) getApiInvoker().deserialize(response, CreateFolderResponse.class);
		return responseObject;
	}

	/**
	 * Compress
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param archiveType  Archive type
     *  
	 * @return CompressResponse {@link CompressResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, archiveType")
	 public static CompressResponse Compress(String userId, String archiveType) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/files/{fileId}/archive/{archiveType}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( archiveType != null) {
			resourcePath = resourcePath.replace("{archiveType}", archiveType);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CompressResponse responseObject = (CompressResponse) getApiInvoker().deserialize(response, CompressResponse.class);
		return responseObject;
	}

	/**
	 * Create Package
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param packageName  Package Name
     *  @param paths  Paths
     *  
	 * @return CreatePackageResponse {@link CreatePackageResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, packageName, paths")
	 public static CreatePackageResponse CreatePackage(String userId, String packageName, String paths) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/packages/{packageName}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( packageName != null) {
			resourcePath = resourcePath.replace("{packageName}", packageName);
		}
		if( paths != null) {
			resourcePath = resourcePath.replace("{paths}", paths);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CreatePackageResponse responseObject = (CreatePackageResponse) getApiInvoker().deserialize(response, CreatePackageResponse.class);
		return responseObject;
	}

	/**
	 * Move to trash
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  
	 * @return FolderMoveResponse {@link FolderMoveResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path")
	 public static FolderMoveResponse MoveToTrash(String userId, String path) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/trash/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		FolderMoveResponse responseObject = (FolderMoveResponse) getApiInvoker().deserialize(response, FolderMoveResponse.class);
		return responseObject;
	}

	/**
	 * Restore from trash
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param path  Path
     *  
	 * @return DeleteResponse {@link DeleteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, path")
	 public static DeleteResponse RestoreFromTrash(String userId, String path) throws APIException {

		//parse inputs
		String  resourcePath = "/storage/{userId}/trash/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteResponse responseObject = (DeleteResponse) getApiInvoker().deserialize(response, DeleteResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}