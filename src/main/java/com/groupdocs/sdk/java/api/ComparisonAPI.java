/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class ComparisonAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Compare
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param sourceFileId  Source File GUID
     *  @param targetFileId  Target File GUID
     *  
	 * @return CompareResponse {@link CompareResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, sourceFileId, targetFileId") 
	 public static CompareResponse Compare(String userId, String sourceFileId, String targetFileId) throws APIException {

		//parse inputs
		String  resourcePath = "/comparison/{userId}/comparison/compare?source={sourceFileId}&target={targetFileId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( sourceFileId != null) {
			resourcePath = resourcePath.replace("{sourceFileId}", APIInvoker.toPathValue(sourceFileId));
		}
		if( targetFileId != null) {
			resourcePath = resourcePath.replace("{targetFileId}", APIInvoker.toPathValue(targetFileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CompareResponse responseObject = (CompareResponse) getApiInvoker().deserialize(response, CompareResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get changes
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param resultFileId  Comparison result file GUID
     *  
	 * @return ChangesResponse {@link ChangesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, resultFileId") 
	 public static ChangesResponse GetChanges(String userId, String resultFileId) throws APIException {

		//parse inputs
		String  resourcePath = "/comparison/{userId}/comparison/changes?resultFileId={resultFileId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( resultFileId != null) {
			resourcePath = resourcePath.replace("{resultFileId}", APIInvoker.toPathValue(resultFileId));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ChangesResponse responseObject = (ChangesResponse) getApiInvoker().deserialize(response, ChangesResponse.class);
		return responseObject;		
				
	 }

	/**
	 * Get document details
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param guid  Document GUID
     *  
	 * @return DocumentDetailsResponse {@link DocumentDetailsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, guid") 
	 public static DocumentDetailsResponse GetDocumentDetails(String userId, String guid) throws APIException {

		//parse inputs
		String  resourcePath = "/comparison/{userId}/comparison/document?guid={guid}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}
		if( guid != null) {
			resourcePath = resourcePath.replace("{guid}", APIInvoker.toPathValue(guid));
		}

		
	
		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DocumentDetailsResponse responseObject = (DocumentDetailsResponse) getApiInvoker().deserialize(response, DocumentDetailsResponse.class);
		return responseObject;		
				
	 }



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}