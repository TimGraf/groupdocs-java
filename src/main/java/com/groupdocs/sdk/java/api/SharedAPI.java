/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class SharedAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Download
	 *
	 * 
	 * 
     * @param guid  GUID
     *  @param fileName  File name
     *  @param render  Render
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="guid, fileName, render")
	 public static String Download(String guid, String fileName, String render) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/files/{guid}?filename={fileName}&render={render}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( guid != null) {
			resourcePath = resourcePath.replace("{guid}", guid);
		}
		if( fileName != null) {
			resourcePath = resourcePath.replace("{fileName}", fileName);
		}
		if( render != null) {
			resourcePath = resourcePath.replace("{render}", render);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get image
	 *
	 * 
	 * 
     * @param sharedSharedInputFilesInputPagesInput  
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="sharedSharedInputFilesInputPagesInput")
	 public static String GetImage(SharedSharedInputFilesInputPagesInput sharedSharedInputFilesInputPagesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/files/{guid}/pages/{folio}/{dimension}?quality={quality}&use_pdf={usePdf}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( sharedSharedInputFilesInputPagesInput != null && sharedSharedInputFilesInputPagesInput.getGuid() != null) {
		 	resourcePath = resourcePath.replace("{guid}", sharedSharedInputFilesInputPagesInput.getGuid());
		}
		if( sharedSharedInputFilesInputPagesInput != null && sharedSharedInputFilesInputPagesInput.getFolio() != null) {
		 	resourcePath = resourcePath.replace("{folio}", sharedSharedInputFilesInputPagesInput.getFolio());
		}
		if( sharedSharedInputFilesInputPagesInput != null && sharedSharedInputFilesInputPagesInput.getDimension() != null) {
		 	resourcePath = resourcePath.replace("{dimension}", sharedSharedInputFilesInputPagesInput.getDimension());
		}
		if( sharedSharedInputFilesInputPagesInput != null && sharedSharedInputFilesInputPagesInput.getQuality() != null) {
		 	resourcePath = resourcePath.replace("{quality}", sharedSharedInputFilesInputPagesInput.getQuality());
		}
		if( sharedSharedInputFilesInputPagesInput != null && sharedSharedInputFilesInputPagesInput.getUsePdf() != null) {
		 	resourcePath = resourcePath.replace("{usePdf}", sharedSharedInputFilesInputPagesInput.getUsePdf());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get image url
	 *
	 * 
	 * 
     * @param guid  GUID
     *  @param folio  Folio
     *  @param dimension  Dimension
     *  @param quality  Quality
     *  @param usePdf  Use Pdf
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="guid, folio, dimension, quality, usePdf")
	 public static String GetImageUrl(String guid, String folio, String dimension, String quality, String usePdf) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/files/{guid}/pages/{folio}/{dimension}/url?quality={quality}&use_pdf={usePdf}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( guid != null) {
			resourcePath = resourcePath.replace("{guid}", guid);
		}
		if( folio != null) {
			resourcePath = resourcePath.replace("{folio}", folio);
		}
		if( dimension != null) {
			resourcePath = resourcePath.replace("{dimension}", dimension);
		}
		if( quality != null) {
			resourcePath = resourcePath.replace("{quality}", quality);
		}
		if( usePdf != null) {
			resourcePath = resourcePath.replace("{usePdf}", usePdf);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get xml
	 *
	 * 
	 * 
     * @param guid  GUID
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="guid")
	 public static String GetXml(String guid) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/files/{guid}/xml";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( guid != null) {
			resourcePath = resourcePath.replace("{guid}", guid);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * Get package
	 *
	 * 
	 * 
     * @param path  Path
     *  
	 * @return String {@link String} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="path")
	 public static String GetPackage(String path) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/packages/{*path}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( path != null) {
			resourcePath = resourcePath.replace("{path}", path);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		String responseObject = (String) getApiInvoker().deserialize(response, String.class);
		return responseObject;
	}

	/**
	 * View document
	 *
	 * 
	 * 
     * @param sharedSharedInputFilesInput  
     *  
	 * @return ViewDocumentResponse {@link ViewDocumentResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="sharedSharedInputFilesInput")
	 public static ViewDocumentResponse ViewDocument(SharedSharedInputFilesInput sharedSharedInputFilesInput) throws APIException {

		//parse inputs
		String  resourcePath = "/shared/files/{guid}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( sharedSharedInputFilesInput != null && sharedSharedInputFilesInput.getGuid() != null) {
		 	resourcePath = resourcePath.replace("{guid}", sharedSharedInputFilesInput.getGuid());
		}
		if( sharedSharedInputFilesInput != null && sharedSharedInputFilesInput.getPageNumber() != null) {
		 	resourcePath = resourcePath.replace("{pageNumber}", sharedSharedInputFilesInput.getPageNumber());
		}
		if( sharedSharedInputFilesInput != null && sharedSharedInputFilesInput.getPageCount() != null) {
		 	resourcePath = resourcePath.replace("{pageCount}", sharedSharedInputFilesInput.getPageCount());
		}
		if( sharedSharedInputFilesInput != null && sharedSharedInputFilesInput.getQuality() != null) {
		 	resourcePath = resourcePath.replace("{quality}", sharedSharedInputFilesInput.getQuality());
		}
		if( sharedSharedInputFilesInput != null && sharedSharedInputFilesInput.getUsePdf() != null) {
		 	resourcePath = resourcePath.replace("{usePdf}", sharedSharedInputFilesInput.getUsePdf());
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ViewDocumentResponse responseObject = (ViewDocumentResponse) getApiInvoker().deserialize(response, ViewDocumentResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}