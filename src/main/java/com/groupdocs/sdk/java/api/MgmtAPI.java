/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class MgmtAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Get user profile
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static UserInfoResponse GetUserProfile(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/profile";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Update user profile
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Info
     *  
	 * @return UpdateUserResponse {@link UpdateUserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData")
	 public static UpdateUserResponse UpdateUserProfile(String userId, UserInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/profile";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateUserResponse responseObject = (UpdateUserResponse) getApiInvoker().deserialize(response, UpdateUserResponse.class);
		return responseObject;
	}

	/**
	 * Change user password
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param postData  Password
     *  
	 * @return ChangePasswordResponse {@link ChangePasswordResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, postData")
	 public static ChangePasswordResponse ChangeUserPassword(String userId, UserPasswordInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/profile/password";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ChangePasswordResponse responseObject = (ChangePasswordResponse) getApiInvoker().deserialize(response, ChangePasswordResponse.class);
		return responseObject;
	}

	/**
	 * Get user profile by reset token
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param token  Token
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, token")
	 public static UserInfoResponse GetUserProfileByResetToken(String callerId, String token) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/reset-tokens?token={token}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( token != null) {
			resourcePath = resourcePath.replace("{token}", token);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Get user profile by verif token
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param token  Token
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, token")
	 public static UserInfoResponse GetUserProfileByVerifToken(String callerId, String token) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/verif-tokens?token={token}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( token != null) {
			resourcePath = resourcePath.replace("{token}", token);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Get user profile by claimed token
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param token  Token
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, token")
	 public static UserInfoResponse GetUserProfileByClaimedToken(String callerId, String token) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/claimed-tokens?token={token}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( token != null) {
			resourcePath = resourcePath.replace("{token}", token);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Get alien user profile
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param userId  User GUID
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, userId")
	 public static UserInfoResponse GetAlienUserProfile(String callerId, String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users/{userId}/profile";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Update alien user profile
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param userId  User GUID
     *  @param postData  Info
     *  
	 * @return UpdateUserResponse {@link UpdateUserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, userId, postData")
	 public static UpdateUserResponse UpdateAlienUserProfile(String callerId, String userId, UserInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users/{userId}/profile";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateUserResponse responseObject = (UpdateUserResponse) getApiInvoker().deserialize(response, UpdateUserResponse.class);
		return responseObject;
	}

	/**
	 * Create user
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param postData  Payload
     *  
	 * @return CreateUserResponse {@link CreateUserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, postData")
	 public static CreateUserResponse CreateUser(String callerId, UserInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CreateUserResponse responseObject = (CreateUserResponse) getApiInvoker().deserialize(response, CreateUserResponse.class);
		return responseObject;
	}

	/**
	 * Create user login
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param userId  User GUID
     *  @param password  Password
     *  
	 * @return UserInfoResponse {@link UserInfoResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, userId, password")
	 public static UserInfoResponse CreateUserLogin(String callerId, String userId, String password) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users/{userId}/logins";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( password != null) {
			resourcePath = resourcePath.replace("{password}", password);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserInfoResponse responseObject = (UserInfoResponse) getApiInvoker().deserialize(response, UserInfoResponse.class);
		return responseObject;
	}

	/**
	 * Change alien user password
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param userId  User GUID
     *  @param postData  Password
     *  
	 * @return ChangePasswordResponse {@link ChangePasswordResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, userId, postData")
	 public static ChangePasswordResponse ChangeAlienUserPassword(String callerId, String userId, UserPasswordInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users/{userId}/password";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ChangePasswordResponse responseObject = (ChangePasswordResponse) getApiInvoker().deserialize(response, ChangePasswordResponse.class);
		return responseObject;
	}

	/**
	 * Reset user password
	 *
	 * 
	 * 
     * @param callerId  Caller GUID
     *  @param userId  User GUID
     *  
	 * @return ResetPasswordResponse {@link ResetPasswordResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="callerId, userId")
	 public static ResetPasswordResponse ResetUserPassword(String callerId, String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{callerId}/users/{userId}/password";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( callerId != null) {
			resourcePath = resourcePath.replace("{callerId}", callerId);
		}
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ResetPasswordResponse responseObject = (ResetPasswordResponse) getApiInvoker().deserialize(response, ResetPasswordResponse.class);
		return responseObject;
	}

	/**
	 * Returns user's storage providers.
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  
	 * @return GetStorageProvidersResponse {@link GetStorageProvidersResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static GetStorageProvidersResponse GetStorageProviders(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/storages";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetStorageProvidersResponse responseObject = (GetStorageProvidersResponse) getApiInvoker().deserialize(response, GetStorageProvidersResponse.class);
		return responseObject;
	}

	/**
	 * Adds a new storage provider configuration.
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param provider  Storage provider name
     *  @param postData  Storage provider configuration details
     *  
	 * @return AddStorageProviderResponse {@link AddStorageProviderResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, provider, postData")
	 public static AddStorageProviderResponse AddStorageProvider(String userId, String provider, StorageProviderInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/storages/{provider}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( provider != null) {
			resourcePath = resourcePath.replace("{provider}", provider);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddStorageProviderResponse responseObject = (AddStorageProviderResponse) getApiInvoker().deserialize(response, AddStorageProviderResponse.class);
		return responseObject;
	}

	/**
	 * Updates user's storage provider configuration.
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param provider  Storage provider name
     *  @param postData  Storage provider configuration details
     *  
	 * @return UpdateStorageProviderResponse {@link UpdateStorageProviderResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, provider, postData")
	 public static UpdateStorageProviderResponse UpdateStorageProvider(String userId, String provider, StorageProviderInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/mgmt/{userId}/storages/{provider}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( provider != null) {
			resourcePath = resourcePath.replace("{provider}", provider);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UpdateStorageProviderResponse responseObject = (UpdateStorageProviderResponse) getApiInvoker().deserialize(response, UpdateStorageProviderResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}