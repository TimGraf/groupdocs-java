/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.groupdocs.sdk.java.api;


import com.groupdocs.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class AntAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Create annotation
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  @param postData  annotation
     *  
	 * @return CreateAnnotationResponse {@link CreateAnnotationResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, postData")
	 public static CreateAnnotationResponse CreateAnnotation(String userId, String fileId, AnnotationInfo postData) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/files/{fileId}/annotations";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		CreateAnnotationResponse responseObject = (CreateAnnotationResponse) getApiInvoker().deserialize(response, CreateAnnotationResponse.class);
		return responseObject;
	}

	/**
	 * Get list of annotations
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  
	 * @return ListAnnotationsResponse {@link ListAnnotationsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId")
	 public static ListAnnotationsResponse ListAnnotations(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/files/{fileId}/annotations";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ListAnnotationsResponse responseObject = (ListAnnotationsResponse) getApiInvoker().deserialize(response, ListAnnotationsResponse.class);
		return responseObject;
	}

	/**
	 * Delete annotation
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param annotationId  Annotation ID
     *  
	 * @return DeleteAnnotationResponse {@link DeleteAnnotationResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, annotationId")
	 public static DeleteAnnotationResponse DeleteAnnotation(String userId, String annotationId) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/annotations/{annotationId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( annotationId != null) {
			resourcePath = resourcePath.replace("{annotationId}", annotationId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		DeleteAnnotationResponse responseObject = (DeleteAnnotationResponse) getApiInvoker().deserialize(response, DeleteAnnotationResponse.class);
		return responseObject;
	}

	/**
	 * Create annotation reply
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param annotationId  Annotation ID
     *  @param message  Message
     *  
	 * @return AddReplyResponse {@link AddReplyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, annotationId, message")
	 public static AddReplyResponse CreateAnnotationReply(String userId, String annotationId, String message) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/annotations/{annotationId}/replies";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( annotationId != null) {
			resourcePath = resourcePath.replace("{annotationId}", annotationId);
		}
		if( message != null) {
			resourcePath = resourcePath.replace("{message}", message);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		AddReplyResponse responseObject = (AddReplyResponse) getApiInvoker().deserialize(response, AddReplyResponse.class);
		return responseObject;
	}

	/**
	 * Edit annotation reply
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param replyGuid  Reply GUID
     *  @param message  Message
     *  
	 * @return EditReplyResponse {@link EditReplyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, replyGuid, message")
	 public static EditReplyResponse EditAnnotationReply(String userId, String replyGuid, String message) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/replies/{replyGuid}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( replyGuid != null) {
			resourcePath = resourcePath.replace("{replyGuid}", replyGuid);
		}
		if( message != null) {
			resourcePath = resourcePath.replace("{message}", message);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		EditReplyResponse responseObject = (EditReplyResponse) getApiInvoker().deserialize(response, EditReplyResponse.class);
		return responseObject;
	}

	/**
	 * Get list of annotation replies
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param annotationId  Annotation ID
     *  @param after  After
     *  
	 * @return ListRepliesResponse {@link ListRepliesResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, annotationId, after")
	 public static ListRepliesResponse ListAnnotationReplies(String userId, String annotationId, String after) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/annotations/{annotationId}/replies?after={after}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( annotationId != null) {
			resourcePath = resourcePath.replace("{annotationId}", annotationId);
		}
		if( after != null) {
			resourcePath = resourcePath.replace("{after}", after);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ListRepliesResponse responseObject = (ListRepliesResponse) getApiInvoker().deserialize(response, ListRepliesResponse.class);
		return responseObject;
	}

	/**
	 * Set annotation collaborators
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  @param collaborators  Collaborators
     *  
	 * @return SetCollaboratorsResponse {@link SetCollaboratorsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId, collaborators")
	 public static SetCollaboratorsResponse SetAnnotationCollaborators(String userId, String fileId, String collaborators) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/files/{fileId}/collaborators";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}
		if( collaborators != null) {
			resourcePath = resourcePath.replace("{collaborators}", collaborators);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SetCollaboratorsResponse responseObject = (SetCollaboratorsResponse) getApiInvoker().deserialize(response, SetCollaboratorsResponse.class);
		return responseObject;
	}

	/**
	 * Get list of annotation collaborators
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param fileId  File ID
     *  
	 * @return GetCollaboratorsResponse {@link GetCollaboratorsResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, fileId")
	 public static GetCollaboratorsResponse GetAnnotationCollaborators(String userId, String fileId) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/files/{fileId}/collaborators";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( fileId != null) {
			resourcePath = resourcePath.replace("{fileId}", fileId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		GetCollaboratorsResponse responseObject = (GetCollaboratorsResponse) getApiInvoker().deserialize(response, GetCollaboratorsResponse.class);
		return responseObject;
	}

	/**
	 * Move annotation
	 *
	 * 
	 * 
     * @param userId  User GUID
     *  @param annotationId  Annotation ID
     *  @param postData  position
     *  
	 * @return MoveAnnotationResponse {@link MoveAnnotationResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, annotationId, postData")
	 public static MoveAnnotationResponse MoveAnnotation(String userId, String annotationId, Point postData) throws APIException {

		//parse inputs
		String  resourcePath = "/ant/{userId}/annotations/{annotationId}/position";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", userId);
		}
		if( annotationId != null) {
			resourcePath = resourcePath.replace("{annotationId}", annotationId);
		}


		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		MoveAnnotationResponse responseObject = (MoveAnnotationResponse) getApiInvoker().deserialize(response, MoveAnnotationResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}